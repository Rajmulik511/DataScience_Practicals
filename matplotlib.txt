#ASG1=======================================================

# Assignment No. 1 Data Wrangling I:
#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv(r"C:\Users\niraj\Downloads\placement_data.csv")
print("Placement dataset is successfully loaded into Data Frame....")

#Display information of dataset
print( "Information of Dataset: \n", df.info)
print( "Shape of Dataset (row x column):",df.shape)
print( "Columns Name:", df.columns)
print( "Total elements in dataset:", df.size)
print( "Datatype of attributes (columns):", df.dtypes)
print( "First 5 rows: \n", df.head().T)
print( "Last 5 rows:\n",df.tail().T)
print( "Any 5 rows: \n",df.sample(5).T)

#Display statistical information of dataset
print( "Statistical information of Numerical Columns: \n", df.describe())

#Display null values
print("Total Number of Null Values in Dataset:", df.isna().sum())

# Data type conversion
print("Converting Data type of variables: ")
df["sl_no"]=df[ "sl_no"].astype( "int8")
print("Check Datatype of sl_no",df.dtypes)
df[ "ssc_p"]=df[ "ssc_p"].astype("int8")
print("Check Datatype of ssc_p",df.dtypes)

# Label Encoding Conversion of Categorical to Quantitative
print("Encoding using Label Encoding (Cat Codes)")
df["gender"] =df["gender"].astype("category")
print("Data types of Gender=", df.dtypes["gender"])
df["gender"]=df["gender"].cat.codes
print("Data types of gender after label encoding =", df. dtypes['gender'])
print("Gender Values:",df["gender"].unique())
# Normalization
print("Normalization using Min-Max Feature Scaling: ")
df["salary"]=(df["salary"]-df["salary"].min())/(df ["salary"].max()-df["salary"].min())
print(df.head().T)


#ASG 2============================================================

#Assignment No. 2 Data Wrangling II Program by Prof. Rahul Dagade & Prof. Varsha Nale

def RemoveOutlier(df,var):
    Q1 =df[var].quantile(0.25)
    Q3 =df[var].quantile(0.75)
    IQR = Q3-Q1
    high, low=Q3+1.5*IQR, Q1-1.5*IQR

    df=df[((df[var] >= low) & (df[var] <= high))]
    print("Outliers removed in", var)
    return df

def DisplayOutliers(df, message):
    fig, axes = plt.subplots(2,2)
    fig.suptitle(message)
    sns.boxplot(data=df, x="raisedhands", ax=axes[0,0])
    sns.boxplot(data=df, x="VisITedResources", ax=axes[0,1])
    sns.boxplot(data=df, x="AnnouncementsView", ax=axes[1,0])
    sns.boxplot(data=df, x="Discussion", ax=axes[1,1])
    fig.tight_layout()
    plt.show()

#import libraries
import  numpy as np
import  pandas as pd
import  seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv(r"C:\Users\niraj\Downloads\student_data.csv")
print("Student Academic Performance Dataset is successfully loaded...")

#Display information of dataset
print("Information of Dataset\:n", df.info)
print("Shape of Dataset (row x column):", df.shape)
print("Columns Name:", df.columns)
print("Total elements in dataset:", df.size)
print("Datatype of attributes {columns}:", df.dtypes)
print("First 5 rows: \n",df.head().T)
print("Last 5 rows:\n",df.tail().T)
print("Any 5 rows: \n",df.sample(5).T)

#Display statistical information of dataset
print("Statistical information of Numerical Columns: \n",df.describe())

#Display null values
print("Total Number of Null values in Dataset:\n", df.isna().sum())

#Handling outliers
DisplayOutliers(df, "Before removing Outliers")
df=RemoveOutlier(df, "raisedhands")
df=RemoveOutlier(df, "VisITedResources")
df=RemoveOutlier(df, "AnnouncementsView")
df=RemoveOutlier(df, "Discussion")
DisplayOutliers(df, "After removing Outliers")
#Conversion of Categorical to Quantitative (Encoding)
df["gender"]=df["gender"].astype("category")
df["gender"]=df["gender"].cat.codes
print("Data types of gender after label encoding =",df.dtypes['gender'])
print("Gender Values:", df["gender"].unique())

sns.boxplot(data=df, x="gender", y="raisedhands", hue="gender")
plt.title("Boxplot with 2 variables gender and raisedhands")
plt.show()

sns.boxplot(data=df,x="NationalITy", y="Discussion", hue="gender")
plt.title("Boxplot with 3 variables gender, nationality, discussion")
plt.show()

print ("Relationship between variables using Scatterplot:")
sns.scatterplot(data=df,x= "raisedhands", y="VisITedResources")
plt.title("Scatterplot for raisedhands, VisITedResources")
plt.show()


#ASG3===========================================================================
#Assignment number: 3 Statistical Information #Program by Prof. Rahul Dagade & Prof. Varsha Nale
#import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

#Read dataset
df = pd.read_csv(r"C:\Users\niraj\Downloads\Employee_Salary.csv")
print("Employee_Salary Dataset is successfully loaded.\n")

#Display information of dataset
print("Iris Dataset is successfully loaded...")
print("Information of Dataset:\n", df.info)
print("Shape of Dataset (row x column):", df.shape)
print("Columns Name: df.columns")
print("Total elements in dataset:", df. size)
print("Datatype of attributes (columns):", df.dtypes)
print("First 5 rows: \n", df.head().T)
print("Last 5 rows: \n", df.tail().T)
print("Any 5 rows: \n", df.sample(5).T)

print("Statistical information of Numerical Columns: \n",)
columns = ["Experience_Years", "Age", "Salary"]
print("{:<20}{:<10}{:<10}{:<20}{:<10}{:<20}".format("Columns", "Min","Max","Mean","Median","STD"))
for column in columns:
    m1,m2,m3=df[column].min(),df[column].max(),df [column].mean()
    m4,s=df[column].median(),df[column].std()
    print("{:<20}{:<10}{:<10}{:<20}{:<10}{:<20}".format(column, m1, m2, m3, m4,5))

print("roupwise Statistical Summary...")
columns=["Experience_Years", "Age", "Salary"]
for column in columns:
    print("\n----------------------",column,"-------------------\n")
print("{:<20}{:<10}{:<10}{:<20}{:<10}{:<20}".format("Columns","Min","Max","Mean","Median","STD"))
m1=df[column].groupby(df ["Gender"]).min()
m2=df[column].groupby(df["Gender"]).max()
m3=df[column].groupby(df["Gender"]).mean()
m4=df[column].groupby(df["Gender"]).median()
s=df[column].groupby(df["Gender"]).std()
print("{:<20}{:<10}{:<10}{:<20}{:<10}{:<20}".format("Female",m1[0],m2[0],m3[0],m4[0],s[0]))
print("{:<20}{:<10}{:<10}{:<20}{:<10}{:<20}".format("Male",m1[1],m2[1],m3[1],m4[1],s[1]))
X = ["min", "max","mean", "median", "std"]
features = ["Salary", "Age","Experience_Years"]
df1 = pd.DataFrame(columns=["min", "max", "mean", "median", "std"])
for var in features:
 df1["min"] =df[var].groupby(df["Gender"]).min()
 df1["max"] =df[var].groupby(df["Gender"]).max()
 df1["mean"] =df[var].groupby(df["Gender"]).mean()
 df1["median"]=df [var].groupby(df["Gender"]).median ()
 df1["std"]=df[var].groupby(df["Gender"]).std()

X_axis=np.arange(len(X))
plt.bar (X_axis-0.2,df1.iloc[0], 0.4, label = "Female")
plt.bar(X_axis+0.2,df1.iloc[1], 0.4, label = "Male")
plt.xticks(X_axis, X)
plt.xlabel("Statistical information")
plt.ylabel(var)
plt.title("Groupwise Statistical Information of Employee Salary Dataset")
plt.legend()
plt.show()

#ASG4========================================================

#Assignment Number: 4 Boston Housing (Linear Regression)Program by Prof. Rahul Dagade & Prof. Varsha Nale

def RemoveOutlier(df, var):
    Q1=df[var].quantile(0.25)
    Q3=df[var].quantile(0.75)
    IQR =Q3-Q1
    high, low=Q3+1.5*IQR, Q1-1.5+IQR

    df=df[((df[var] >= low) & (df[var] <=high))]
    return df
def DisplayOutlier(df, msg):
    fig,axes=plt.subplots(1,2)
    fig.suptitle(msg)
    sns.boxplot(data=df, x="rm", ax=axes[0])
    sns.boxplot(data = df, x="lstat", ax=axes[1])
    fig.tight_layout()
    plt.show()
#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv (r"C:\Users\niraj\Downloads\Boston.csv")
print("Boston dataset is successfully loaded")

#Display information of dataset
print("Information of Dataset:\n", df.info)
print("Shape of Dataset row x column):", df.shape)
print("Columns Name:", df.columns)
print("Total elements in dataset:",df.size)
print("Datatype of attributes (columns):" ,df.dtypes)
print("First 5 rows: \n", df.head().T)
print("last 5 rows:\n",df.tail().T)
print("Any 5 rows: \n",df.sample(5).T)

#Find missing values
print ("Missing values")
print(df.isnull().sum())

#Find correlation matrix-
print("Finding correlation matrix using heatmap:")
sns.heatmap(df.corr(),annot=True)
plt.show()

#Finding and removing outliers
print("Finding and removing outliers: ")
DisplayOutlier(df, "Before removing Outliers:")
print("Identifying overall outliers in Column Name variables")
df = RemoveOutlier(df, "lstat")
df = RemoveOutlier(df,"rm")
DisplayOutlier(df,"After removing Outliers")

#Split the data into inputs and outputs
x=df[["rm","lstat"]] #input data
y=df["medv"]         #output data

#Training and testing data
from sklearn.model_selection import train_test_split

#Assign test data size 20%
x_train, x_test, y_train, y_test =train_test_split(x,y,test_size=0.20, random_state=0)

#Apply linear regression model on training data
from sklearn.linear_model import LinearRegression
model=LinearRegression().fit(x_train, y_train)
y_pred=model.predict(x_test)

#Display accuracy of the model
from sklearn.metrics import mean_absolute_error
print("MAE:",mean_absolute_error(y_test,y_pred))
print("Model Score:",model.score(x_test,y_test))

#Test the model using user input
print("Predict House Price by giving User Input:")
features= np.array([[6,19]])
prediction= model.predict(features)
print("Prediction: ()".format(prediction))
#ASG5==============================

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_csv(r"C:\Users\niraj\Downloads\Social_Network_Ads.csv")
print(df)

print(df.info())
print(df.size)
print(df.shape)
print(df.columns)
print(df.head())
print(df.tail())
print(df.sample())
print(df.describe())
print(df.dtypes)
print(df.isnull().sum())
print(df.isna().sum())

sns.heatmap(df.corr(), annot=True)
plt.show()

l = ['Age', 'EstimatedSalary', 'Purchased']
for i in l:
    sns.boxplot(df[i])
    plt.show()

x = df[['Age', 'EstimatedSalary']]
y = df['Purchased']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.1, random_state=0)

from sklearn.preprocessing import StandardScaler
x_train = StandardScaler().fit_transform(x_train)
x_test = StandardScaler().fit_transform(x_test)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression().fit(x_train, y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
sns.heatmap(cm, annot=True, linewidths=.3)
plt.show()


#ASG6========================================================

#Assignment No. 6 Classification on IRIS Dataset
#Program by Prof. Rahul Dagade & Prof. Varsha Nale


def RemoveOutlier(df, var):
    Q1 = df[var].quantile(0.25)
    Q3 = df[var].quantile(0.75)
    IQR = Q3 - Q1
    high, low = Q3 + 1.5 * IQR, Q1 - 1.5 + IQR

    df = df[((df[var] >= low) & (df[var] <= high))]
    return df


def DisplayOutlier(df, msg):
    fig,axes = plt.subplots(2, 2)
    fig.suptitle(msg)
    sns.boxplot(data=df, x="sepal.length", ax=axes[0,0])
    sns.boxplot(data=df, x="sepal.width", ax=axes[0,1])
    sns.boxplot(data=df, x="petal.length", ax=axes[1,0])
    sns.boxplot(data=df, x="petal.width", ax=axes[1,1])
    fig.tight_layout()
    plt.show()


# import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read Dataset
df = pd.read_csv(r"C:\Users\niraj\Downloads\iris - 2023-05-20T153708.481.csv")
print("Iris dataset is successfully loaded")

# Display information of dataset
print("Information of Dataset:\n", df.info)
print("Shape of Dataset row x column):", df.shape)
print("Columns Name:", df.columns)
print("Total elements in dataset:", df.size)
print("Datatype of attributes (columns):", df.dtypes)
print("First 5 rows: \n", df.head().T)
print("last 5 rows:\n", df.tail().T)
print("Any 5 rows: \n", df.sample(5).T)

# Find missing values
print("Missing values")
print(df.isnull().sum())

#Finding and removing outliers
print("Finding and removing outliers: ")
DisplayOutlier(df, "Before removing Outliers")
df = RemoveOutlier(df, "sepal.length")
df = RemoveOutlier(df, "sepal.width")
df = RemoveOutlier(df, "petal.length")
df = RemoveOutlier(df, "petal.width")
DisplayOutlier(df,"After removing Outliers")


#Encoding of output variable
df["variety"]=df["variety"].astype('category')
df["variety"]=df["variety"].cat.codes

#Find correlation matrix-
print("Finding correlation matrix using heatmap:")
sns.heatmap(df.corr(),annot=True)
plt.show()

#Split the data into inputs and outputs
x= df.iloc[:, [0,1,2,3]].values
y= df.iloc[:, 4].values

#Training and testing data
from sklearn.model_selection import train_test_split

#Assign test data size 20%
x_train, x_test, y_train, y_test =train_test_split(x,y,test_size=0.20, random_state=0)

#Normalization of input data
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
x_train= sc_X.fit_transform(x_train)
x_test= sc_X.fit_transform(x_test)

#Apply Gaussian Naive Bayes classifier
from sklearn.naive_bayes import GaussianNB
model=GaussianNB()
model.fit(x_train, y_train)
y_pred=model.predict(x_test)

#Display classification report
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

#Display confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print("confusion matrix\n",cm)
fig, ax=plt.subplots(figsize=(5, 5))
sns.heatmap(cm,annot=True,linewidths=.3,cmap="Blues")
plt.show()


#ASG7==========================================
#Assigment 7 Text processing and calculation of TF-IDF

import nltk
import re

nltk.download("punkt")
nltk.download("stopwords")
nltk.download("wordnet")
nltk.download("averaged_perceptron_tagger")
nltk.download("omw-1.4")

text ="Tokenization is the first step in text analytics. The process of breaking down a text par"

#Sentence Tokenization.
from nltk.tokenize import sent_tokenize
tokenized_text=sent_tokenize(text)
print(tokenized_text)

#Word Tokenization
from nltk.tokenize import word_tokenize
tokenized_word=word_tokenize(text)
print(tokenized_word)

#Print stop words of English
from nltk.corpus import stopwords
stop_words=set(stopwords.words("english"))
print(stop_words)

text: "How to remove stop words with NLTK Library in Python?"
text= re.sub("[^a-zA-Z]"," ",text)
tokens = word_tokenize(text.lower ())
filtered_text=[]

for w in tokens:
    if w not in stop_words:
        filtered_text.append(w)
print ("Tokenized Sentence:", tokens)
print ("Filterd Sentence:", filtered_text)

from nltk.stem import PorterStemmer
e_words= ["wait", "waiting", "waited", "waits"]
ps=PorterStemmer()
for w in e_words:
    rootWord=ps.stem(w)
print(rootWord)

from nltk.stem import WordNetLemmatizer
wordnet_lemmatizer= WordNetlemmatizer()
text = "studies studying cries cry"
tokenization=nltk.word_tokenize(text)
for w in tokenization:
    print("Lemma for () is ".format(w, wordnet_lemmatizer, lemmatize[w]))

from nltk.tokenize import word_tokenize
data="The pink sweater fit her perfectly"
words=word_tokenize(data)
for word in words:
    print(nltk.pos_tag([word]))

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
d0="Jupiter is the largest Planet"
d1="Mars is the fourth planet from the Sun"
string=[d0,d1]
tfidf =Tfidfvectorizer()
result = tfidf.fit_transform(string)
print("Word indices:", tfidf.vocabulary)
print("TF-IDF Values:", result)




#ASG8=======================================================

#Assignment no. 8 Data Visualization on Titanic Dataset (Histogram)

#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv(r"C:\Users\niraj\Downloads\titanic.csv")
print("Titanic dataset is successfully loaded into Data Frame....")


#Display information of dataset
print( "Information of Dataset: \n", df.info)
print( "Shape of Dataset (row x column):",df.shape)
print( "Columns Name:", df.columns)
print( "Total elements in dataset:", df.size)
print( "Datatype of attributes (columns):", df.dtypes)
print( "First 5 rows: \n", df.head().T)
print( "Last 5 rows:\n",df.tail().T)
print( "Any 5 rows: \n",df.sample(5).T)

#Find missing values
print ("Missing values")
print(df.isnull().sum())

#Fill the missing values
df ["Age"].fillna (df["Age"].median(), inplace=True)
print ("Null values are: \n",df.isnull().sum())

#Histogram of 1-variable
fig, axes= plt.subplots(1,2)
fig. suptitle(" Histogram 1-variables (Age & Fare)")
sns. histplot(data=df, x="Age", ax=axes[0])
sns. histplot(data=df, x="Fare", ax=axes [1])
plt.show()

#Histogram of 2-variables
fig, axes =plt.subplots(2,2)
fig.suptitle( "Histogram of 2-variables")
sns.histplot(data = df, x="Age",hue="Survived", multiple="dodge", ax=axes[0,0])
sns.histplot(data = df, x="Fare",hue="Survived", multiple="dodge", ax=axes[0,1])
sns.histplot(data = df, x="Age",hue="Sex", multiple= "dodge", ax=axes[1,0])
sns.histplot(data = df, x="Fare", hue="Sex", multiple="dodge", ax=axes [1, 1])
plt.show()



#ASG9=======================================================

# Assignment no. 9 Data Visualization on Titanic Dataset (Boxplot)

#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv(r"C:\Users\niraj\Downloads\titanic.csv")
print("Titanic dataset is successfully loaded into Data Frame....")


#Display information of dataset
print( "Information of Dataset: \n", df.info)
print( "Shape of Dataset (row x column):",df.shape)
print( "Columns Name:", df.columns)
print( "Total elements in dataset:", df.size)
print( "Datatype of attributes (columns):", df.dtypes)
print( "First 5 rows: \n", df.head().T)
print( "Last 5 rows:\n",df.tail().T)
print( "Any 5 rows: \n",df.sample(5).T)

#Find missing values
print ("Missing values")
print(df.isnull().sum())

#Fill the missing values
df ["Age"].fillna (df["Age"].median(), inplace=True)
print ("Null values are: \n",df.isnull().sum())

#Boxplot of 1-variable
fig, axes =plt.subplots(1,2)
fig.suptitle("Boxplot of 1-variables (Age & Fare)")
sns.boxplot (data =df, x="Age", ax=axes[0])
sns.boxplot (data =df, x="Fare",ax=axes[1])
plt.show()

#Boxplot of 2-variables
fig, axes =plt.subplots(2,2)
fig.suptitle("Boxplot of 2-variables")
sns.boxplot (data = df, x="Survived", y="Age", hue="Survived", ax=axes[0,0])
sns.boxplot (data = df, x="Survived", y="Fare", hue="Survived",ax=axes[0,1])
sns.boxplot (data = df, x="Sex", y="Age", hue= "Sex", ax=axes[1,0])
sns.boxplot (data = df, x="Sex", y="Fare", hue="Sex", ax=axes[1,1])
plt.show()

#Boxplot of 3-variables
fig, axes= plt.subplots(1,2)
fig.suptitle("Boxplot of 3-variables")
sns.boxplot (data=df, x="Sex", y="Age", hue="Survived", ax=axes[0])
sns. boxplot(data=df, x = "Sex", y="Fare",hue="Survived", ax=axes [1])
plt.show()


#ASG10=======================================================

#ssignment no, 10 Data Visualization on IRIS Dataset (Histogram & Boxplot)

#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read Dataset
df=pd.read_csv(r"C:\Users\niraj\Downloads\iris - 2023-05-20T153708.481.csv")
print("iris dataset is successfully loaded into Data Frame....")


#Display information of dataset
print( "Information of Dataset: \n", df.info)
print( "Shape of Dataset (row x column):",df.shape)
print( "Columns Name:", df.columns)
print( "Total elements in dataset:", df.size)
print( "Datatype of attributes (columns):", df.dtypes)
print( "First 5 rows: \n", df.head().T)
print( "Last 5 rows:\n",df.tail().T)
print( "Any 5 rows: \n",df.sample(5).T)

#Find missing values
print ("Missing values")
print(df.isnull().sum())

#Histogram of 1-variable
fig, axes= plt.subplots(2,2)
fig.suptitle("Histogram 1-variables")
sns.histplot(data=df,x="sepal.length", ax=axes[0,0])
sns.histplot(data=df,x="sepal.width", ax=axes [0,1])
sns.histplot(data=df,x="petal.length", ax=axes[1,0])
sns.histplot(data=df,x="petal.width", ax=axes[1,1])
plt.show()

#Histogram of 2-variables
fig, axes =plt.subplots(2,2)
fig.suptitle("Histogram of 2-variables")
sns.histplot(data=df, x="sepal.length",hue="variety", multiple="dodge", ax=axes[0,0])
sns.histplot(data=df, x="sepal.width",hue="variety", multiple="dodge", ax=axes[0,1])
sns.histplot(data=df, x="petal.length",hue="variety", multiple ="dodge",ax=axes[1,0])
sns.histplot(data=df, x="petal.width",hue="variety", multiple="dodge", ax=axes[1,1])
plt.show()

#Boxplot of 1-variable.
fig, axes= plt.subplots(2,2)
fig.suptitle("Boxplot of 1-variables")
sns.histplot(data=df,x="sepal.length", ax=axes[0,0])
sns.histplot(data=df,x="sepal.width", ax=axes [0,1])
sns.histplot(data=df,x="petal.length", ax=axes[1,0])
sns.histplot(data=df,x="petal.width", ax=axes[1,1])
plt.show()


#Boxplot of 2-variables
fig, axes =plt.subplots(2,2)
fig.suptitle("Histogram of 2-variables")
sns.histplot(data=df, x="sepal.length",y="variety", hue="variety", ax=axes[0,0])
sns.histplot(data=df, x="sepal.width",y="variety", hue="variety", ax=axes[0,1])
sns.histplot(data=df, x="petal.length",y="variety", hue="variety",ax=axes[1,0])
sns.histplot(data=df, x="petal.width",y="variety", hue="variety", ax=axes[1,1])
plt.show()

